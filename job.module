<?php
/*
 *      job.module
 *      
 *      Copyright 2014 Sammy Fung <sammy@sammy.hk>
 *      
 */

function job_help($path, $arg) {
  $output = '';  
  switch ($path) {
    case "admin/help#job":
      $output = '<p>'.  t("Displays job posts available") .'</p>';
      break;
  }
  return $output;
}

function job_block_info() {
  $blocks['job_latest'] = array(
    'info' => t('Latest jobs'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['job_category'] = array(
    'info' => t('Job Categories'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

function job_latest_posts($display) {
  $max_num = variable_get('latest_job_max', 5);
  $query = db_select('node', 'n')
    ->fields('n',array('nid','title','created'))
    ->condition('status', 1)
    ->condition('type','job')
    ->orderBy('created','DESC');
  if ($display == 'block') {
    $query->range(0, $max_num);
  }
  return $query->execute();
}

function job_block_view($delta = '') {
  switch ($delta) {
    case 'job_latest':
      $block['subject'] = t('Latest Jobs');
      if (user_access('access job content')) {
        $result = job_latest_post('block');
        $items = array();
        foreach ($result as $node) {
          $items[] = array(
            'data' => l($node->$title, 'node/' . $node->nid),
          );
        }
        if (empty($items)) {
          $block['content'] = t('No job posts available.');
        }
        else {
          $block['content']['posts'] = array(
            '#theme' => 'item_list__job__block',
            '#items' => $items,
          );
          $block['content']['more'] = array(
            '#theme' => 'more_link__job',
            '#url' => 'job',
            '#title' => t('More'),
          );
        }
      }
    return $block;
  }
}

function job_menu() {
  $items = array();
  $items['admin/config/content/job'] = array(
    'title' => 'Latest jobs',
    'description' => 'Configuration of job board module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('job_admin_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['job'] = array(
    'title' => 'Job Board',
    'description' => 'List of Job Categories',
    'page callback' => 'job_list_category_page',
    'access arguments' => array('access job content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['job/category/%'] = array(
    'description' => 'List of Job Post',
    'page callback' => 'job_list_job_page',
    'page arguments' => array(2),
    'access arguments' => array('access job content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['job/category/%/feed'] = array(
    'description' => 'List of Job Post in feed',
    'page callback' => 'job_list_job_feed',
    'page arguments' => array(2),
    'access arguments' => array('access job content'),
    'type' => MENU_SUGGESTED_ITEM,
  );  
  /*
  $items['jobad/%'] = array(
    'title' => 'Job Ad',
    'description' => 'List of Job Ad',
    'page callback' => 'jobad_page',
    'page arguments' => arg(1),
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  */
  return $items;
}

function job_admin_form($form, &$form_state) {
  $form['latest_job_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of job posts'),
    '#default_value' => variable_get('latest_job_max', 5),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t('The maximum number of job posts to display in the block.'),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}

function job_admin_form_validate($form, &$form_state) {
  $max_num = $form_state['values']['latest_job_max'];
  if (!is_numeric($max_num)) {
    form_set_error('latest_job_max', t('You must enter a number for the maximum number of job posts to display.'));
  }
  else if ($max_num <= 0) {
    form_set_error('latest_job_max', t('Maximum number of job posts to display must be positive.'));
  }
}

function job_permission() {
  return array(
    'administer job module' => array(
      'title' => t('Administer the job board module'),
    ),
    'access job content' => array(
      'title' => t('Access job posts'),
    ),
  );
}

function _job_page() {
  drupal_set_title('Latest jobs');
  $result = job_latest_posts('page');
  $items = array();
  foreach ($result as $node) {
    $items[] = array(
      'data' => l($node->title, 'node/' . $node->nid),
    );
  }
  if (empty($items)) {
    $page_array['current_posts_arguments'] = array(
      '#title' => t('Latest job posts'),
      '#markup' => t('No job posts available.'),
    );
    return $page_array;
  }
  else {
    $page_array['current_posts_arguments'] = array(
      '#title' => t('Latest job posts'),
      '#items' => $items,
      '#theme' => 'item_list__job',
    );
    return $page_array;
  }
}

function job_node_info() {
  return array(
    'company' => array(
      'name' => t('Company'),
      'base' => 'job',
      'description' => "This is a basic company information node type with a few fields.",
      'has_title' => TRUE,
      'title_label' => t('Company Name'),
    ),
    'job' => array(
      'name' => t('Job'),
      'base' => 'job',
      'description' => "This is a job post node type with a few fields.",
      'has_title' => TRUE,
      'title_label' => t('Job Title'),
    ),
  );
} 

function job_form($node, &$form_state) {
  $type = node_type_get_type($node);
  $form = array();
  switch ($type->orig_type) {
    case 'job':
      $form['company'] = array(
        '#type' => 'select',
        '#title' => t('Company'),
        '#default_value' => isset($node->company) ? $node->company : -1,
        '#options' => array(
          0 => '-- Annoymous --',
        ),    
        '#required' => FALSE,
        '#weight' => -10
      );
      // Getting user's company.
      $list = _company_list($node);
      for ($i=0;$i<$list->rowCount();$i++) {
        $company = $list->FetchObject();
        $form['company']['#options'][$company->nid] = $company->title;
      } 
      $form['title'] = array(
        '#type' => 'textfield',
        '#title' => check_plain($type->title_label),
        '#required' => TRUE,
        '#default_value' => $node->title,
        '#weight' => -5
      );  
      $form['description'] = array(
        '#type' => 'text_format',
        '#format' => 'filtered_html',
        '#title' => t('Job Description'),
        '#default_value' => isset($node->description) ? $node->description : '',
        '#required' => FALSE
      );
      // Job Requirement
      $form['requirement'] = array(
        '#type' => 'text_format',
        '#format' => 'filtered_html',
        '#title' => t('Job Requirement'),
        '#rows' => 20,
        '#default_value' => isset($node->requirement) ? $node->requirement : '',
        '#required' => TRUE,
      );
      $form['application'] = array(
        '#type' => 'text_format',
        '#format' => 'filtered_html',
        '#title' => t('Job Application'),
        '#default_value' => isset($node->application) ? $node->application : '',
        '#required' => FALSE  
      );
      break;
    case 'company':
      if ($type->has_title) {
        $form['title'] = array(
          '#type' => 'textfield',
          '#title' => check_plain($type->title_label),
          '#required' => TRUE,
          '#default_value' => $node->title,
          '#weight' => -5
        );
      }
      $form['description'] = array(
        '#type' => 'text_format',
        '#format' => 'filtered_html',
        '#title' => t('Company description'),
        '#default_value' => isset($node->description) ? $node->description : '',
        '#required' => FALSE
      );      
      $form['phone'] = array(
        '#type' => 'textfield',
        '#title' => t('Phone number'),
        '#default_value' => isset($node->phone) ? $node->phone : '',
        '#required' => FALSE
      );
      $form['fax'] = array(
        '#type' => 'textfield',
        '#title' => t('Fax number'),
        '#default_value' => isset($node->fax) ? $node->fax : '',
        '#required' => FALSE
      );
      $form['email'] = array(
        '#type' => 'textfield',
        '#title' => t('Email Address'),
        '#default_value' => isset($node->email) ? $node->email : '',
        '#required' => FALSE
      );
      $form['website'] = array(
        '#type' => 'textfield',
        '#title' => t('Website URL'),
        '#default_value' => isset($node->website) ? $node->website : '',
        '#required' => FALSE
      );
      $form['person'] = array(
        '#type' => 'textfield',
        '#title' => t('Contact Person'),
        '#default_value' => isset($node->person) ? $node->person : '',
        '#required' => FALSE
      );
      break;
  }
  return $form;
}

function _company_list($account) {
  return db_select('node','n')
    ->fields('n')
    ->condition('type','company','=')
    ->condition('uid',$account->uid,'=')
    ->orderBy('title')
    ->execute();
}

function job_insert($node) {
  $type = node_type_get_type($node);
  switch ($type->orig_type) {
    case 'job':
      $nid = db_insert('job')
      ->fields(array(
        'nid' => $node->nid,
        'vid' => $node->vid,
        'requirement' => $node->requirement,
        'company' => $node->company,
        'application' => $node->application,
        'description' => $node->description,
      ))
      ->execute();
      break;
    case 'company':
      $nid = db_insert('company')
      ->fields(array(
        'nid' => $node->nid,
        'vid' => $node->vid,
        'description' => $node->description,
        'phone' => $node->phone,
        'fax' => $node->fax,
        'email' => $node->email,
        'website' => $node->website,
        'person' => $node->person,
      ))
      ->execute();
      break;
  }
}

function job_update($node) {
  $type = node_type_get_type($node);
  switch ($type->orig_type) {
    case 'job':
      $num_of_row = db_update('job')
      ->fields(array(
        'company' => $node->company,
        'requirement' => $node->requirement,
        'application' => $node->application,
        'description' => $node->description,
      ))
      ->condition('nid',$node->nid,'=')
      ->execute();
      break;
    case 'company':
      $num_of_row = db_update('company')
      ->fields(array(
        'description' => $node->description,
        'phone' => $node->phone,
        'fax' => $node->fax,
        'email' => $node->email,
        'website' => $node->website,
        'person' => $node->person,
      ))
      ->condition('nid',$node->nid,'=')
      ->execute();
      break;
  }
}

function job_load($nodes) {
  foreach ($nodes as $node) {
    $type = node_type_get_type($node);
    switch ($type->type) {
      case 'job':
        $result = db_select('job','a')
          ->fields('a')
          ->condition('vid',$node->vid,'=')
          ->execute()
          ->fetchObject();
        $nodes[$result->nid]->company = $result->company;
        $nodes[$result->nid]->requirement = $result->requirement;
        $nodes[$result->nid]->description = $result->description;
        $nodes[$result->nid]->application = $result->application;
        break;
      case 'company':
        $result = db_select('company','c')
          ->fields('c')
          ->condition('vid',$node->vid,'=')
          ->execute()
          ->fetchObject();
        $nodes[$result->nid]->description = $result->description;
        $nodes[$result->nid]->phone = $result->phone;
        $nodes[$result->nid]->fax = $result->fax;
        $nodes[$result->nid]->email = $result->email;
        $nodes[$result->nid]->website = $result->website;
        $nodes[$result->nid]->person = $result->person;    
        break;
    }
  }
}

function job_delete(&$node) {
  $type = node_type_get_type($node);
  switch ($type->orig_type) {
    case 'job':
      $num_of_row = db_delete('job')
        ->condition('nid', $node->nid)
        ->execute();
      break;
    case 'company':
      $num_of_row = db_delete('company')
        ->condition('nid', $node->nid)
        ->execute();
      break;
  }
}

function job_node_view($node, $view_mode, $langcode) {
  switch ($node->type) {
    case 'job':
      $node->content['requirement'] = array(
        '#markup' => t('<div><strong>Job Requirement</strong></div><div>!requirement</div>', array('!requirement' => $node->requirement)),
        '#weight' => 0,
      );
      
      if ($view_mode == 'full') {
        if ($node->company > 0) {
          $node->content['company'] = array(
            '#markup' => t('<div><a href="!url">!company</a></div>', array('!url' => url('node/'._company_bynid($node->company)->nid),'!company' => _company_bynid($node->company)->title)),
            '#weight' => -10,
          );  
        }
        if ($node->description != '') {
          $node->content['description'] = array(
            '#markup' => t('<div><strong>Job Description</strong></div><div>!description</div>', array('!description' => $node->description)),
            '#weight' => -5,
          );    
        }
        if ($node->application != '') {        
          $node->content['application'] = array(
            '#markup' => t('<div><strong>Job Application</strong></div><div>!application</div>', array('!application' => $node->application)),
            '#weight' => 5,
          );
        }
        $breadcrumb = drupal_get_breadcrumb();
        $jobcategory = $node->field_jobcategory["und"][0]["taxonomy_term"];
        drupal_set_breadcrumb(array_merge($breadcrumb, array(t("<a href='!url'>Job Board</a>", array('!url' => url('job')))), array(t("<a href='!url'>!name</a>", array('!name' => $jobcategory->name, '!url' => url('job/category/'.$jobcategory->tid)))) , array($node->title)));
      }
      break;
    case 'company':
      if ($node->description != '') {
        $node->content['description'] = array(
          '#markup' => t('<div>!description</div>', array('!description' => $node->description)),
          '#weight' => -7,
        );
      }
      if ($view_mode == 'full') {
        if ($node->phone != '') {
          $node->content['phone'] = array(
            '#markup' => t('<div><strong>Phone:</strong> !phone</div>', array('!phone' => check_plain($node->phone))),
            '#weight' => -5,
          );
        }
        if ($node->fax != '') {
          $node->content['fax'] = array(
            '#markup' => t('<div><strong>Fax:</strong> !fax</div>', array('!fax' => check_plain($node->fax))),
            '#weight' => -3,
          );
        }
        if ($node->email != '') {
          $node->content['email'] = array(
            '#markup' => t('<div><strong>Email:</strong> <a href="mailto:!email">!email</a></div>', array('!email' => check_plain($node->email))),
            '#weight' => -1,
          );
        }
        if ($node->website != '') {
          $node->content['website'] = array(
            '#markup' => t('<div><strong>Website:</strong> <a href="!website">!website</a></div>', array('!website' => check_plain($node->website))),
            '#weight' => -1,
          );
        }
        if ($node->person != '') {
          $node->content['person'] = array(
            '#markup' => t('<div><strong>Contact Person:</strong> !person</div>', array('!person' => check_plain($node->person))),
            '#weight' => -1,
          );
        }
        $breadcrumb = drupal_get_breadcrumb();
        drupal_set_breadcrumb(array_merge($breadcrumb, array(t("<a href='!url'>Job Board</a>", array('!url' => url('job'))), t('Company'),$node->title)));
      }
      break;
  }
  return $node;
}

function _company_bynid($nid) {
  return db_select('node','n')
   ->fields('n')
   ->condition('type','company','=')
   ->condition('nid',$nid,'=')
   ->execute()
   ->fetchObject();
}

function job_list_category_page() {
  drupal_set_title(t('Job Board'));
  $breadcrumb = drupal_get_breadcrumb();
  drupal_set_breadcrumb(array_merge($breadcrumb, array(t("<a href='!url'>Job Board</a>", array('!url' => url('job'))))));
  $output = "<div class='job'>";
  $list = _job_list_category();
  while ($category = $list->fetchObject()) {
    $output .= t("<div class='job_catagory_!cid'>!category </div>", array('!cid' => $category->tid, '!category' => l($category->name,'job/category/'.$category->tid)));
  }
  $output .= "</div>";
  return $output;
}

function _job_list_category($cid = 0) {
  if ($cid > 0)
    $category = ' AND tid = '.$cid;
  else $category = '';
  $additions = db_query('SELECT * FROM {taxonomy_term_data} WHERE vid = :vid' . $category, array(':vid' => variable_get('job_vocabulary_jobcategory', 0)));
  return $additions;
}

function job_user_view($account, $view_mode) {
  $list = _company_list($account);
  $output = "<div class='company_list'><h3>List of Companies</h3><table>\n";
  $output .= "<tr><th>Company Name</th></tr>\n";
  $i = 0;
  while ($company = $list->fetchObject()) {  
    $output .= t("  <tr class='@class'><td><a href='@url'>@name</a></td></tr>\n", array('@class' => (++$i % 2 ? 'odd' : 'even'), '@name' => $company->title, '@url' => url('node/'.$company->nid)));
  }
  $output .= "</table></div>\n"; 
  $account->content['company'] = array(
    '#type' => 'markup',
    '#value' => $output,
    '#weight' => 10,
  );
}

function _job_list($cids, $num_per_page) {
  $limit = '';
  if ($num_per_page > 0) {
    $page = isset($_GET['page']) ? $_GET['page'] : 0;
    $start = $num_per_page * $page;
    $limit = ' LIMIT '. $start . ',' . $num_per_page;
  }
  $order = 'n.sticky DESC, n.created DESC';
  $joins = ' INNER JOIN {job} j ON n.vid = j.vid';
  $args = array();
  $output = "<div class='job'>";
  $index = 0;
  $joins .= ' INNER JOIN {field_revision_field_jobcategory} tn'. $index .' ON n.vid = tn'. $index .'.revision_id';
  $wheres = ' AND tn'. $index .'.field_jobcategory_tid IN (:cid)';
  $args = array_merge($args, array($cids));
  $sql = 'SELECT DISTINCT(n.nid), n.sticky, n.title, n.created, j.company FROM {node} n '. $joins ." WHERE n.status = 1 AND n.type = 'job' ". $wheres .' ORDER BY '. $order . $limit;
  $args = array(':cid' => $cids);
  $list = db_query($sql, $args);
  return $list;
}

function job_list_job_page($cids, $page = 0) {
  $categoryname = _job_list_category($cids)->fetchObject()->name;
  drupal_set_title(t('Job Posts in !name', array('!name' => $categoryname)));
  $breadcrumb = drupal_get_breadcrumb();
  drupal_set_breadcrumb(array_merge($breadcrumb, array(t("<a href='!url'>!name</a>", array('!url' => url('job/category/'.$cids), '!name' => $categoryname)))));
  $output = '<div>';
  $total = _job_list($cids, 0)->rowCount();
  $num_per_page = variable_get('job_num_per_page', 10);
  $list = _job_list($cids, $num_per_page);
  $has_rows = FALSE;
  $i = 0;
  while ($job = $list->fetchObject()) {
    if ($has_rows == FALSE) {
      $output .= "<table>\n<tr><th>Date</th><th>Title</th><th>Company</th></tr>\n";      
      $has_rows = TRUE;      
    }
    $postdate = format_date($job->created, 'custom', 'd/m/y');
    if ($job->company>0) {
      $company = _company_bynid($job->company);
      $company = t("<a href='!url'>!name</a>", array('!url' => url('node/'.$job->company), '!name' => $company->title));
    } else {
      $company = '-';
    }
    $output .= t("<tr class='@class'><td>!date</td><td><a href='!nid'>!title</a></td><td>!company</td></tr>\n", array('@class' => (++$i % 2 ? 'odd' : 'even'), '!date' => $postdate,'!nid' => url('node/'.$job->nid), '!title' => $job->title, '!company' => $company));
  }
  if ($has_rows == TRUE) {
    $output .= '</table>';
    pager_default_initialize($total, $num_per_page);
    $output .= theme('pager');
  } else {
    $output .= '<p>'. t('There are currently no jobs in this category.') .'</p>';
    }
  $output .= '</div>';
  drupal_add_feed('job/category/'. $cids .'/feed', 'RSS - '. $categoryname);
  return $output;
}

function job_list_job_feed($cids) {
  $categoryname = _job_list_category($cids)->fetchObject()->name;
  $num_per_page = variable_get('job_num_per_page', 10);
  $list = _job_list($cids, $num_per_page);
  $channel['link'] = url('job/category/'. $cids .'/', array('absolute' => TRUE));
  $channel['title'] = variable_get('site_name', 'Drupal') .' - '. t('Job Posts in !cat', array('!cat' => $categoryname));
  $items = array();
  while ($job = $list->fetchObject()) {
    $items[] = $job->nid;
  }
  node_feed($items, $channel);
}

function job_node_view_alter(&$build) {
  if ($build["#bundle"] == 'job') {
    $build['field_jobcategory'][0]['#href'] = preg_replace('/^taxonomy\/term\//', 'job/category/',$build['field_jobcategory'][0]['#href']);
    $build['field_jobcategory']['#weight'] = 30;
    $build['field_jobtype']['#weight'] = 31;
  }
}

function job_form_alter(&$form, &$form_state, $form_id) {
  if (array_key_exists('type', $form)) {
    if ($form['type']['#value'] == 'job') {
      $form['field_jobcategory']['#weight'] = 0;
      $form['field_jobtype']['#weight'] = 0;
    } else if ($form['type']['#value'] == 'company') {
      $form['field_companycategory']['#weight'] = 0;
      $form['field_companylocation']['#weight'] = 0;
    }
  }
}
